#project 1

from pathlib import Path
from pathlib import PurePath
import os
import datetime

#directory functions here
#takes a path and prints the files in that directory
def directories(a_path):
    'D = discovers ONLY immediate directory files'

    file_list = []
    
    if a_path.is_dir() == True:
        for single_file in a_path.iterdir():
            if single_file.is_dir():
                pass
            else:
                file_list.append(single_file)
                file_list.sort()
        for i in file_list:
            print(i)
    else:
        error_msg()

#takes path and prints all files and subdirectories with their files
def subdirectories(b_path):
    'R = discovers directories files AND subdirectory files'
    
    if b_path.is_dir() == True:
        directories(b_path)
        for files in b_path.iterdir():
            if files.is_file():
                pass
            elif files.is_dir():
                subdirectories(files)
    else:
        error_msg()

#refining functions here
def interesting(ifiles):
    'A = marks files as interesting'
    
    print(interesting_files)


def files_with(paths):
    'N = finds all paths that end with the given name'
    for paths in file_list:
        if paths.name == msg:
            print(paths)
    
def extensions():
    'searches files that match with this ending extension'
    pass
    
def touch_files():
    'T = updates the time stamp to current time stamp'
    ts = datetime.datetime.now()
    print(ts)
    
def file_size():
    '< or > = will find files that has sizes according to symbol'
    pass
    
def line_of_text():
    '''prints the first line of text from the file if it's a text file
       print NOT TEXT if it is not'''
    if _.is_file:
        print()
    else:
        print('NOT TEXT')
    
def duplicate():
    'D= duplicates the given file and places it in the same path'
    pass

def error_msg():
    print('ERROR')

#running

msg = input()
the_path = Path(msg[2:])

if msg[2:] == '':
    error_msg()

elif the_path.exists():
    if msg.startswith('D '):
        directories(the_path)
            
    elif msg.startswith('R '):
        subdirectories(the_path)

#refining search
    while the_path.exists():
        nextmsg = input()
        if nextmsg.startswith('N '):
            files_with(the_path)

        elif nextmsg == 'A':
            interesting(the_path) 
                    
        elif nextmsg.startswith('E '):
            extensions()
                        
        elif nextmsg.startswith('T '):
            touch_files()
                        
        elif nextmsg.startswith('< ') | msg.startswith('> '):
            file_size()
                        
        elif nextmsg == 'F':
            line_of_text()
            
        elif nextmsg == 'D':
            nextduplicate()
        else:
            error_msg()

    #E = extensions w or w out period proceeding it
    #T = text files











    
